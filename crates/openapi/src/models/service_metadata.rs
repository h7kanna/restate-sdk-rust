/*
 * Admin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceMetadata {
    /// Fully qualified name of the service
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "handlers")]
    pub handlers: Vec<models::HandlerMetadata>,
    #[serde(rename = "ty")]
    pub ty: models::ServiceType,
    /// Deployment exposing the latest revision of the service.
    #[serde(rename = "deployment_id")]
    pub deployment_id: String,
    /// Latest revision of the service.
    #[serde(rename = "revision")]
    pub revision: i32,
    /// If true, the service can be invoked through the ingress. If false, the service can be invoked only from another Restate service.
    #[serde(rename = "public")]
    pub public: bool,
    /// The retention duration of idempotent requests for this service.
    #[serde(rename = "idempotency_retention")]
    pub idempotency_retention: String,
    /// The retention duration of workflows. Only available on workflow services.
    #[serde(rename = "workflow_completion_retention", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub workflow_completion_retention: Option<Option<String>>,
}

impl ServiceMetadata {
    pub fn new(name: String, handlers: Vec<models::HandlerMetadata>, ty: models::ServiceType, deployment_id: String, revision: i32, public: bool, idempotency_retention: String) -> ServiceMetadata {
        ServiceMetadata {
            name,
            handlers,
            ty,
            deployment_id,
            revision,
            public,
            idempotency_retention,
            workflow_completion_retention: None,
        }
    }
}

